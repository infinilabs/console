@import '../../core/public/variables.scss';
$euiSize:     16px !default;

$euiSizeXS:   $euiSize * .25 !default;
$euiSizeS:    $euiSize * .5 !default;
$euiSizeM:    $euiSize * .75 !default;
$euiSizeL:    $euiSize * 1.5 !default;
$euiSizeXL:   $euiSize * 2 !default;
$euiSizeXXL:  $euiSize * 2.5 !default;

$euiButtonMinWidth: $euiSize * 7 !default;

$euiScrollBar: $euiSize !default;
$euiScrollBarCorner: $euiSizeS * .75 !default;
$inpEmptyStateMaxWidth: $euiSizeXXL * 19;

$euiColorLightestShade: #F5F7FA !default;
$euiColorFullShade: #000 !default;

$euiBorderRadius: 4px !default;


$euiBreakpoints: (
  'xs': 0,
  's':  575px,
  'm':  768px,
  'l':  992px,
  'xl': 1200px
) !default;

$euiBreakpointKeys: map-keys($euiBreakpoints);


@mixin euiBreakpoint($sizes...) {
  // Loop through each size parameter
  @each $size in $sizes {
    // Store the location of the size in the list to check against
    $index: index($euiBreakpointKeys, $size);

    // Check to make sure it exists in the allowed breakpoint names
    @if ( $index ) {

      // Set the min size to the value of the size
      $minSize: map-get($euiBreakpoints, $size);

      // If it is the last item, don't give it a max-width
      @if ( $index == length($euiBreakpointKeys) ) {
        @media only screen and (min-width: $minSize) {
          @content;
        }
      // If it's not the last item, add a max-width
      } @else {

        // Set the max size to the value of the next size (-1px as to not overlap)
        $maxSize: map-get($euiBreakpoints, nth($euiBreakpointKeys, $index + 1)) - 1px;

        // If it's the the first item, don't set a min-width
        @if ( $index == 1 ) {
          @media only screen and (max-width: $maxSize) {
            @content;
          }
        // Otherwise it should have a min and max width
        } @else {
          @media only screen and (min-width: $minSize) and (max-width: $maxSize) {
            @content;
          }
        }
      }
    // If it's not a known breakpoint, throw a warning
    } @else {
      @warn "euiBreakpoint(): '#{$size}' is not a valid size in $euiBreakpoints. Accepted values are '#{$euiBreakpointKeys}'";
    }
  }
}

@mixin euiFontSizeS {
  @include fontSize($euiFontSizeS);
  line-height: $euiLineHeight;
}


.euiPagination__list{
  margin-bottom: auto !important;
}